The following is a list of key methods (functions) and properties (data members)
provided in the most important classes in the FastTrack.dll library. 

This is not intended as an exhaustive list or full technical description. If you
would like to see the exact software details, please read the comments in the 
source code. 

################################################################################

** K1Timer Class **

This class is the highest level of abstaction and should contain most all of the
functionality needed by an application that would like to interface with the 
device. 

- Instance Constuctor
	Parameters: Port name (String)
		Connects to the device and initializes its settings to default values. 
	Notes: 
		The ProlificUsbSerialConverter class contains functions for finding the 
		port name based on the driver information. 

. ComPort Property
	This property exposes the underlying FastTrackSerialComPort object that 
	controls communications with the device. For more information about this 
	objects functions see the description of the FastTrackSerialComPort class. 
	
! NewRaceResultsEvent Event
	This event is raised whenever race results are received from the device. 
	The results are sent to all subscribed event handlers. 

! ResultsClearedEvent Event
	This event is raised when the device indicates that the results have been 
	cleared. 

. LastResultsCleared Property 
	The software simply records that the last results have been cleared if a 
	results cleared event has occurred since the last new results event. If the
	device was cleaed while out of communication with the software this value 
	may be out-of-date.
		
- UpdateFeatureList Method 
	Parameters: none
	Tells the software to update its recored of the features that are available. 
	In short, run the RF command and store the results. 

- IsFeatureAvailable Method
	Parameters: Feature in question.
	Returns True if the specified feature is available. Otherwise, false. This 
	method uses the software's last information about the features instead of 
	calling the device again every time it is used. 

- GetSerialNumber Method
	Parameters: none
	Gets and returns the serial number. 

- TestDeviceCommunication Method
	Parameters: none
	This method attempts to read the device's mode. If the reponse is received,
	it passes the test and returns true. If it times out, it returns false.

- EndRace Method
	Parameters: none
	Sends the force print command if the feature is enabled.  

- ClearRace Method
	Parameters: none
	Sends the RX command and laser reset command. 

- RestoreDefaults Method
	Parameters: none
	Resets loads the software defaults for the device settings and any software 
	settings. 
	
- SetLaneMasks Method
	Parameters: six boolean parameters corresponding to each of the six lanes.
	Clears existing mask values, sets the specified maskes, and rereads the 
	device mode to ensure that the software values are accurate. 

- IsMaskSet Method
	Parameters: specified lane
	Returns true if the specified lane is recorded to be masked. 

- EnableAutomaticReset Method
	Parameters: time in seconds
	Enables automatic reset and sets the time to be the specifed time.
	The method returns the time estimate to which the value was set since the 
	command can only use discrete values. 

- DisableAutomaticReset Method
	Parameters: none
	Disables the automatic reset setting. 

. AutomaticResetTimeIncrement
	The estimated times for the automatic reset time out are estimated using a 
	linear equation with a slope equal to a constant time increment. The current
	version of the code uses 1.65 seconds as this value work best for setting 
	the max and min to values close to what the timer specs stated. In testing 
	this value was found to be a little low. 

. AutomaticResetMinDelay
	The minimum time estimated for the automatic reset. The value is equal to 
	the time increment X 1 = 1.65 seconds. 

. AutomaticResetMaxDelay
	The maximum time estimate for the automatic reset. The value is equal to 
	the time increment X 15 = 24.75 seconds. 

. AutomaticResetLastValueSet
	The last value the software recorded sending to the device. Since the device
	does not give any simple method of knowing what the status of this feature 
	is, the software stores the last value for reference. 

- ReverseLanes Method
	Parameters: Number of lanes to reverse
	Reverses the specified number of lanes and then updates the software's 
	copy of the devices mode values. 

. AreLanesReversed Property
	Returnes true if the lanes are reversed. 

. NumberOfReversedLanes Property
	Returns the number of lanes reversed. 

- SetEliminatorMode Method
	Parameters: Boolean value indicateding whether it should be on or off. 
	Enables or disables the eliminator mode. 

- IsEliminatorModeEnabled Method
	Parameters: none
	Returns true if it is enabled. Otherwise, false.

. OffsetResultsForTies Property
	True if enabled. 
	By default, the timer will use the places in order from first to last even 
	if a tie occurs. For example, on a four lane track, a tie for first may 
	result in the following places: 1 1 2 3. For my purposes, I would rather 
	offset the places followin the tie so that they are the same as they would 
	have been if the tie had not occurred. Thus, the same places could be 
	reinterpreted as the following: 1 1 3 4. My reasoning was that the car on 
	lane 3 was slower than 2 cars whether they happened to be tied or not. 
	Assuming that not everyone would want it this way I made it a software 
	option, but enabled it by default. 	

. MaxLogicalLaneCount Property
	Returns the number of logical lanes supported by the timers firmware. This 
	value is set to 6.

- DetectNumberOfDeviceLanes Method
	Parameters: none
	The goal of this method is to determine the number of lanes physical lanes 
	acctually supported by the device and return the value. 
	
	The detection process depends on a convenient quark of the mask lane 
	commands. If a lane is physically present, the lane mask command will result
	in the modification of the device mode as read by the read mode command 
	(RM). By attempting to mask all of the lanes and rereading the mode, I was 
	able to count the number of lanes that were successfully masked as the 
	physical lane count. Of course, this method is dependent on the feature 
	being available. 

. LastDetectedPhysicalLaneCount Property
	The value found the last time the DetectNumberOfDeviceLanes method was run.
	
################################################################################

** ProlificUsbSerialConverter ** 

	In Windows Vista, and probably other versions of windows, each device driver
	is associated with its own background service. The driver supplied by the 
	parallel to usb converter uses the "Ser2pl" service. Windows stores some of 
	the driver service information in the registry under 
	"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\[service_name]".
	Under this key is found an enumeration of device instance paths for the 
	devices supported by the service. 
	I also found a service named "Serenum" that is called a filter driver. It 
	seemed to contain the same information as the driver service. I think that 
	it is a more general driver service provided by windows. My hope is that 
	it may still contain usefull information if a different specific driver and
	converter are used. 
	
	The device instance path may be appended to the following registry path to 
	find specific information about the device including what COM port it is:
	"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Enum"

- GetProlificComPorts Method
	Parameters: none
	Returns an array of custom infomation structures including the name, 
	description, and device instance path for each device managed by the 
	Prolific brand driver supplied with the converter. 

- GetFilterDriverComPorts Method
	Parameters: none
	Returns an array of custom infomation structures including the name, 
	description, and device instance path for each device managed by the 
	windows filter driver. 
	
################################################################################

** FastTrackSerialComPort ** 

	This class is an encapsulation of the System.SerialPort class. It supports 
	a few of the basic methods such as open and close, but the key reason for
	the abstraction is that it has a specially designed Send method, and 
	response handler. 
	
- Send Method
	Parameters: SerialCommand object. 
	
	On the serface this method is simple. It accepts a object type that 
	identifies the command to send. It sends the command and returns the 
	response by way of setting response data in the command object. 
	
	In testing raw communication with the device, it was found that if a 
	commands is sent before a previous command has time to respond the 
	communication with device will stop working until the device is power 
	cycled. The device response very fast from the perspective of a user, but 
	it is much slower from a software perspective. The softare needs to be able 
	to send multiple commands back to back without worrying about jamming the 
	device. One cannot assume, however, that the only reponse will be the 
	response associated with the last command sent. The device can return race
	results or race cleared responses at almost any time. Various operating 
	system and device buffers can slow down the communication allowing one of 
	these reponses to received before the command sent can reach the device. 
	Also, if the power to the device is unplugged and plugged in again, the 
	initial welcome messge could be sent. 
	
	To complecate matters further, the device responses are processed by an
	event handler on a different thread of execution. Since device communication
	is always a relatively slow operation by comparison to raw code processing,
	the respones received event proviced by the underlying SerialPort object is 
	raised every time the device sends a character. 
	
	To solve these complications the Send function first uses mutual exclustion 
	to ensure that only one command is processed at a time. The command object 
	is a subtype of SerialResponse type so it may be handled as a response 
	object as well. The class maintains a list of expected responses. The Send 
	method adds the command to the list of expected responses. The list already
	includes response objects for the race result and race cleared responses. 
	After the response is sent, the code blocks until the response handler 
	signals that a complete response has been received or until a set timeout. 
	
	The response handler maintains a buffer of text received. Each time it runs 
	it reads all new text available and adds it to the buffer. Each response 
	object in the list contians a regular expression (string pattern matching
	expresstion) for matching a complete response of its type, and any form of 
	partially complete response. It matches, removes, and sends all completed 
	responses to the response object to be parsed for returned information. 
	Next all text that cannot be identified as a part of a partial response is 
	discarded. 
	
	After the Send function is allowed to resume, it finishes some necessary 
	cleanup and releases its restriction on sending the next command. 
	
	As a result of these extra precautions the calling code may send one 
	command after another as rapidly as it wishes and expect that the Send 
	function will finish its job and return the results or indicate failure 
	before the exicution continues to the next line of code. It may be executed 
	in a simple sequential manner, and not worry about the race conditions and 
	multi-threaded mess so much. 
